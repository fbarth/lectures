lm7 <- lm(yValues ~ ns7)
lm8 <- lm(yValues ~ ns8)
lm9 <- lm(yValues ~ ns9)
lm10 <- lm(yValues ~ ns10)
help(rsme)
help(rmse)
help(rmse)
??rmse
rmse
library(tools)
rmse
library(rmse)
install.packages("rmse")
sqrt(mean(lm1$residuals^2))
sqrt(mean(lm2$residuals^2))
sqrt(mean(lm3$residuals^2))
sqrt(mean(lm4$residuals^2))
sqrt(mean(lm5$residuals^2))
sqrt(mean(lm6$residuals^2))
sqrt(mean(lm7$residuals^2))
sqrt(mean(lm8$residuals^2))
sqrt(mean(lm9$residuals^2))
sqrt(mean(lm10$residuals^2))
install.packages("simpleboot")
str(iris)
set.seed(1234)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.7, 0.3))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
library(party)
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
iris_ctree <- ctree(myFormula, data=trainData)
install.packages("party")
library(party)
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
iris_ctree <- ctree(myFormula, data=trainData)
table(predict(iris_ctree), trainData$Species)
print(iris_ctree)
plot(iris_ctree)
plot(iris_ctree, type="simple")
testPred <- predict(iris_ctree, newdata = testData)
table(testPred, testData$Species)
help(ctree)
library(Rweka)
install.packages(Rweka)
install.packages('Rweka')
install.packages('RWeka')
library(RWeka)
help(RWeka)
??RWeka
help(J48)
iris_j48 <- J48(myFormula, data=trainData)
table(predict(iris_j48), trainData$Species)
print(iris_j48)
plot(iris_j48)
set.seed(3343)
pValues = rep(NA,100)
for(i in 1:100){
z = rnorm(20)
x = rnorm(20)
y = rnorm(20,mean=0.5*x)
pValues[i] = summary(lm(y ~ x))$coef[2,4]
}
pValues
x <- norm(10)
help(norm)
x <- norm(cbind(1,1:10))
plot(x)
x <- norm(cbind(1000,1:10))
plot(x)
x <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
y <- c(5,6,8,9,7,5,3,5,7,10,13,16,14,11,4)
plot(x,y)
help(plot)
plot(x,y, type="l")
help(plot)
plot(x,y, type="l")
plot(x,y, type="l", xlab="Estados de um espaço de busca (estados)", ylab="16 - h(estados)", main="Gráfico que ilustra mínimo e máximo local de um problema de otimização")
scatter.smooth(x,y, type="l", xlab="Estados de um espaço de busca (estados)", ylab="16 - h(estados)", main="Gráfico que ilustra mínimo e máximo local de um problema de otimização")
plot(x,y, type="l", xlab="Estados de um espaço de busca (estados)", ylab="16 - h(estados)", main="Gráfico que ilustra mínimo e máximo local de um problema de otimização")
pesos = c(76.2, 80.3, 90, 117.4)
pesos
nomes = c("maria", "carlos", "pedro", "antônio")
nomes
pesosV = c(76.2, 80.3, 90, 117.4)
nomesV = c("maria", "carlos", "pedro", "antônio")
myList <- list(pesos = pesosV, nomes = nomesV)
myList
myList <- list(pesos = pesosV, nomes = nomesV, outros = nomesV)
myList
myMatrix = matrix(c(1, 2, 3, 4), byrow = T, nrow = 2)
myMatrix
vector1 = c(188.2, 181.3, 193.4)
vector2 = c("jeff", "roger", "andrew", "brian")
myDataFrame = data.frame(heights = vector1, firstNames = vector2)
vector1 = c(188.2, 181.3, 193.4)
vector2 = c("jeff", "roger", "andrew")
myDataFrame = data.frame(heights = vector1, firstNames = vector2)
myDataFrame
vector1 = c(188.2, 181.3, 193.4, NA) vector1
## [1] 188.2 181.3 193.4 NA
is.na(vector1)
## [1] FALSE FALSE FALSE TRUE
vector1
vector1 = c(188.2, 181.3, 193.4, NA)
vector1
is.na(vector1)
data(iris)
help(data)
data()
fileUrl <- "http://earthquake.usgs.gov/earthquakes/catalogs/eqs7day-M1.txt" download.file(fileUrl,destfile="./data/earthquakeData.csv",method="curl") dateDownloaded <- date()
dateDownloaded
fileUrl <- "http://earthquake.usgs.gov/earthquakes/catalogs/eqs7day-M1.txt"
download.file(fileUrl,destfile="./data/earthquakeData.csv",method="curl")
dateDownloaded <- date()
dateDownloaded
eData <- read.csv("./data/earthquakeData.csv")
download.file(fileUrl,destfile="earthquakeData.csv",method="curl")
eData <- read.csv("earthquakeData.csv")
data(weather)
data()
nome <- "maria"
class(nome)
clear
cls
nome
peso <- 76.2
peso <- 76.2
nome <- "maria"
qtdFilhos = 1L
qtdFilhos
qtdFilhos + peso
qtdFilhos + peso
x <- qtdFilhos + peso
class(x)
myMatrix = matrix(c(1, 2, 3, 4), byrow = T, nrow = 2)
myMatrix
myMatrix = matrix(c(1, 2, 3, 4), byrow = F, nrow = 2)
myMatrix
myMatrix = matrix(c(1, 2, 3, 4), byrow = T, nrow = 1)
myMatrix
myMatrix = matrix(c(1, 2, 3, 4), byrow = T, nrow = 4)
myMatrix
vector1 = c(188.2, 181.3, 193.4)
vector2 = c("jeff", "roger", "andrew", "brian")
myDataFrame = data.frame(heights = vector1, firstNames = vector2)
vector1 = c(188.2, 181.3, 193.4, NA)
myDataFrame = data.frame(heights = vector1, firstNames = vector2)
myDataFrame
smoker <- c ("yes", "no", "yes")
class(smoker)
class(smoker[1])
smoker
smoker[1]
smoker[2]
smoker <- as.factor(smoker)
class(smoker)
smoker
data(iris)
dim(iris)
iris
head(iris)
iris[1:6,]
iris$Species
levels(iris$Species)
names(iris)
class(iris$Sepal.Length)
class(iris$Sepal.Width)
sapply(iris, class)
min(iris$Sepal.Length)
max(iris$Sepal.Length)
summary(iris$Sepal.Length)
levels(iris$Species)
iris[Species == "virginica",]
iris[iris$Species == "virginica",]
summary(iris[iris$Species == "virginica",])
summary(iris[iris$Species == "virginica",])
boxplot(iris$Sepal.Length)
summary(iris$Sepal.Length)
par(mfrow==c(2,2))
par(mrow==c(2,2))
par(frow==c(2,2))
help(par)
par(mfrow=c(1,2))
boxplot(iris[,1])
boxplot(iris[,2])
boxplot(iris[,2], ylim=c(0,8))
boxplot(iris[,1], ylim=c(0,8))
plot(iris$Petal.Length, iris$Petal.Width, pch=19)
par(mfrow=c(1,1))
plot(iris$Petal.Length, iris$Petal.Width, pch=19)
sinal <- function(primeiro, segundo, resultado){
return ("-")
}
sinal(10, 400, 30)
sinal <- function(primeiro, segundo, final){
if (final < primeiro)
return ("-")
else
return ("+")
}
sinal(178,56,122)
sinal(200,200,400)
sinal(100,34,134)
sinal(900,100,1000)
sinal(7000,8000,7000000000)
sinal(10,5,5)
sinal(10,5,15)
sinal(10,5,15)
sinal(10,5,5)
library("stringr")
help(stringr)
??stringr
help(stringr::str_match)
help(str_match)
help(sample)
124 * 9
1833.75 + 2989.70 + 234.19 + 601.20 + 1399.89 + 473.33
library(RecordLinkage)
install.packages("RecordLinkage")
library(RecordLinkage)
levenshteinSim("apple", "apple")
levenshteinSim("analista de sistemas", "analista sistema")
levenshteinSim("analista pmo pleno", "analista de sistemas")
levenshteinSim("analista pmo pleno", "gerente ou coordenador na area de informativa")
levenshteinSim("analista pmo pleno", "")
help(levenshteinSim)
help(RecordLinkage)
??RecordLinkage
library(ggmap)
install.package(ggmap)
install.package("ggmap")
install.packages("ggmap")
library(ggmap)
geocode("Av. Conselheiro Rodrigues Alves, 727. Vila Mariana. São Paulo")
geocodeQueryCheck()
data(iris)
plot(iris$Sepal.Length, iris$Sepal.Width)
plot(iris$Petal.Length, iris$Petal.Width)
plot(iris$Petal.Length, iris$Petal.Width, pch=19)
plot(iris$Petal.Length, iris$Petal.Width, pch=21, bg=("red","green","yellow")[as.numeric(iris$Species)])
plot(iris$Petal.Length, iris$Petal.Width, pch=21, bg=c("red","green","yellow")[as.numeric(iris$Species)])
legend(locator(1), levels(iris$Species))
legend(locator(1), levels(iris$Species), fill=c("red","green","yellow"))
plot(iris$Petal.Length, iris$Petal.Width, pch=21, bg=c("red","green","yellow")[as.numeric(iris$Species)])
legend(locator(1), levels(iris$Species), fill=c("red","green","yellow"))
plot(iris$Petal.Length ~ iris$Species)
plot(iris$Petal.Length , iris$Species)
plot(iris$Petal.Length ~ iris$Species)
par(mfrow=c(1,2))
plot(iris$Petal.Length ~ iris$Species)
plot(iris$Species, iris$Petal.Length)
plot(as.numeric(iris$Species), iris$Petal.Length)
plot(as.numeric(iris$Species), iris$Petal.Length, jitter=0.5)
plot(as.numeric(iris$Species), jitter(iris$Petal.Length), pch=19)
plot(jitter(as.numeric(iris$Species)), iris$Petal.Length, pch=19)
plot(jitter(as.numeric(iris$Species)), iris$Petal.Length, pch=19)
plot(jitter(as.numeric(iris$Species)), iris$Petal.Length, pch=19, xlab="Species")
plot(jitter(as.numeric(iris$Species)), iris$Petal.Length, pch=19, xlab="Species")
plot(iris$Petal.Length ~ iris$Species)
hist(iris$Petal.Length)
par(mfrow=c(1,1))
hist(iris$Petal.Length)
summary(iris$Petal.Length)
par(mfrow=c(2,2))
sapply(iris[,1:4],hist)
hist(iris$Sepal.Width)
par(mfrow=c(1,1))
hist(iris$Sepal.Width)
summary(iris$Sepal.Width)
var(iris$Sepal.Width)
var(iris$Pet)
var(iris$Petal.Length)
plot(iris[,1:4])
plot(iris[,1:4], pch=21)
plot(iris[,1:4], pch=19)
plot(iris[,1:4], pch=21, bg=c("red","green","yellow")[as.numeric(iris$Species)])
legend(locator(1), levels(iris$Species), fill=c("red","green","yellow"))
legend(locator(1), levels(iris$Species), fill=c("red","green","yellow"))
legend(locator(1), levels(iris$Species), fill=c("red","green","yellow"))
plot(iris[,1:4], pch=21, bg=c("red","green","yellow")[as.numeric(iris$Species)])
help(cov)
cov(iris)
cov(iris[,1:4])
cor(iris[,1:4])
heatmap(as.matrix(iris))
heatmap(as.matrix(iris[,1:4]))
heatmap(iris[,1:4])
heatmap(as.matrix(iris[,1:4]))
help(par)
help(heatmap)
heatmap(as.matrix(iris[,1:4]))
heatmap(as.matrix(iris[,1:4]), Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
heatmap(as.matrix(iris[,1:4]), margins=c(10,10)
)
data(wine)
clusterModel <- kmeans(iris[,1:4], centers=3, nstart=100)
plot(iris[,1], iris[,2], col = clusterModel$cluster, pch=21)
points(clusterModel$centers, pch=21,cex=3,lwd=3)
clusterModel <- kmeans(iris[,1:4], centers=3, nstart=100)
plot(iris[,1], iris[,2], col = clusterModel$cluster, pch=21)
points(clusterModel$centers, pch=21,cex=3,lwd=2)
clusterModel <- kmeans(iris[,1:4], centers=3, nstart=100)
plot(iris[,1], iris[,2], col = clusterModel$cluster, pch=21)
points(clusterModel$centers, pch=21,cex=2,lwd=3)
clusterModel <- kmeans(iris[,1:4], centers=3, nstart=100)
plot(iris[,1], iris[,2], col = clusterModel$cluster, pch=19)
points(clusterModel$centers, pch=19,cex=2,lwd=3)
clusterModel <- kmeans(iris[,1:4], centers=3, nstart=100)
plot(iris[,1], iris[,2], col = clusterModel$cluster, pch=19)
points(clusterModel$centers, col = clusterModel$cluster, pch=19,cex=2,lwd=3)
clusterModel <- kmeans(iris[,1:4], centers=3, nstart=100)
plot(iris[,1], iris[,2], col = clusterModel$cluster, pch=19)
points(clusterModel$centers, col = clusterModel$centers, pch=19,cex=2,lwd=3)
clusterModel <- kmeans(iris[,1:4], centers=3, nstart=100)
plot(iris[,1], iris[,2], col = clusterModel$cluster, pch=19)
points(clusterModel$centers, col = clusterModel$cluster, pch=21,cex=2,lwd=3)
clusterModel <- kmeans(iris[,1:4], centers=3, nstart=100)
plot(iris[,1], iris[,2], col = clusterModel$cluster, pch=19)
points(clusterModel$centers, col = clusterModel$cluster, pch=3,cex=2,lwd=3)
clusterModel <- kmeans(iris[,1:4], centers=3, nstart=100)
plot(iris[,1], iris[,2], col = 1:3, pch=19)
points(clusterModel$centers, col = 1:3, pch=3,cex=2,lwd=3)
clusterModel <- kmeans(iris[,1:4], centers=3, nstart=100)
plot(iris[,1], iris[,2], col = clusterModel$cluster, pch=19)
points(clusterModel$centers, col = 1:3, pch=3,cex=2,lwd=3)
clusterModel <- kmeans(iris[,1:4], centers=3, nstart=100)
plot(iris[,1], iris[,2], col = clusterModel$cluster, pch=19)
points(clusterModel$centers, col = 1:3, pch=21,cex=2,lwd=3)
clusterModel <- kmeans(iris[,1:4], centers=3, nstart=100)
plot(iris[,1], iris[,2], col = clusterModel$cluster, pch=19)
points(clusterModel$centers, col = 1:3, pch=19,cex=2,lwd=3)
clusterModel <- kmeans(iris[,1:4], centers=3, nstart=100)
plot(iris[,3], iris[,4], col = clusterModel$cluster, pch=19)
points(clusterModel$centers, col = 1:3, pch=19,cex=2,lwd=3)
clusterModel <- kmeans(iris[,1:4], centers=3, nstart=100)
plot(iris[,3], iris[,4], col = clusterModel$cluster, pch=19)
points(clusterModel$centers, col = 1:3, pch=21,cex=2,lwd=3)
clusterModel <- kmeans(iris[,1:4], centers=3, nstart=100)
plot(iris[,1], iris[,2], col = clusterModel$cluster, pch=19)
points(clusterModel$centers, col = 1:3, pch=21,cex=2,lwd=3)
clusterModel <- kmeans(iris[,1:4], centers=3, nstart=100)
plot(iris[,1], iris[,2], col = clusterModel$cluster, pch=19)
points(clusterModel$centers, col = 1:3, pch=19,cex=2,lwd=3)
names(eData)
dim(eData)
eData <- read.csv("earthquakeData.csv")
names(eData)
dim(eData)
sapply(eData,class)
levels(eData$Eqid)
levels(eData$Region)
table(eData$Region)
summary(eData$Magnitude)
summary(eData$Depth)
names(eData)
eData$MagnitudeNorm <- eData$Magnitude / max(eData$Magnitude)
eData$DepthNorm <- eData$Depth / max(eData$Depth)
names(eData)
seed(1234)
set.seed(1234)
eData[,clusterModel$cluster == 2]
eData[clusterModel$cluster == 2, ]
(clusterModel$cluster == 2)
set.seed(1234)
clusterModel <- kmeans(eData[,11:12], centers=4, nstart=100)
par(mfrow=c(1,2))
plot(eData[,11], eData[,12], col = clusterModel$cluster, pch=19, xlab="Magnitude", ylab="Depth", main="Valores normalizados")
plot(eData[,7], eData[,8], col = clusterModel$cluster, pch=19, xlab="Magnitude", ylab="Depth", main="Valores originais")
clusterModel
clusterModel$cluster == 4
eData[clusterModel$cluster == 4, ]
table(eData$Region)
ordered(table(eData$Region))[1:3]
sort(table(eData$Region))[1:3]
sort(table(eData$Region), type=desc)[1:3]
sort(table(eData$Region), type=asc)[1:3]
sort(table(eData$Region)[2], type=asc)[1:3]
sort(table(eData$Region), type=asc)[1:3]
table(eData$Region)[,2]
class(table(eData$Region))
attributes(table(eData$Region))
eData <- read.csv("earthquakeData.csv")
eData$MagnitudeNorm <- eData$Magnitude / max(eData$Magnitude)
eData$DepthNorm <- eData$Depth / max(eData$Depth)
table(eData$Region)
table(eData$Region)[,2]
table(eData$Region)
class(table(eData$Region))
help(table)
temp <- as.data.frame(table(eData$Region))
temp
temp <- temp[sort(temp$Freq)]
temp <- temp[sort(temp$Freq),]
head(temp)
sapply(temp,class)
temp <- temp[ordered(temp$Freq),]
temp
as.data.frame(table(eData$Region))
help(data.frame)
temp <- as.data.frame(table(eData$Region))
temp <- subset(temp, temp$Freq > 100)
temp
distdata <- dist(eData)
distdata
names(eData)
distdata <- dist(eData[,7:8])
distdata
plot(hclust(distdata))
data(iris)
distdata <- dist(iris[,1:4])
plot(hclust(distdata))
help(hclust)
plot(hclust(distdata, method= "complete"))
plot(hclust(distdata, method= "single"))
plot(hclust(distdata, method= "average"))
data()
data(UCBAdmissions)
names(UCBAdmissions)
data(cars)
names(cars)
head(cars)
summary(cars$speed)
summary(cars$dist)
help(cars)
irirs[1:10,1:2]
iris[1:10,1:2]
iris[,1:2]
data(iris)
model <- kmeans(iris, centers=3)
model <- kmeans(iris[,1:4], centers=3)
model
model$withinss
sum(model$withinss)
model <- kmeans(iris[,1:4], centers=2)
sum(model$withinss)
model <- kmeans(iris[,1:4], centers=3)
sum(model$withinss)
model <- kmeans(iris[,1:4], centers=4)
sum(model$withinss)
model <- kmeans(iris[,1:4], centers=5)
sum(model$withinss)
train <- read.csv("~/Documents/challenges/blackBoxLearning/train.csv")
View(train)
test <- read.csv("~/Documents/challenges/blackBoxLearning/test.csv")
View(test)
train <- read.csv("~/Documents/challenges/blackBoxLearning/train.csv")
View(train)
library(randomForest)
help(randomForest)
table(train$label)
model <- randomForest(label ~ ., data=train, importance=TRUE, sampsize=c(70,70,70,70,70,70,70,70,70))
model
model <- randomForest(label ~ ., data=train, importance=TRUE, sampsize=c(70,70,70,70,70,70,70,70,70), do.trace=100)
model <- randomForest(label ~ ., data=train, importance=TRUE, sampsize=70, do.trace=100)
train$label <- as.factor(paste(train$label))
model <- randomForest(label ~ ., data=train, importance=TRUE, sampsize=70, do.trace=100)
model <- randomForest(label ~ ., data=train, importance=TRUE, sampsize=c(70,70,70,70,70,70,70,70,70), do.trace=100)
print(model)
p_mais = 29/64
p_menos = 35 /64
help(log2)
entropia_s = - p_mais * log2(p_mais) - p_menos * log2(p_menos)
vinhos <- read.csv("~/Documents/aulas/bandtec/2013-1/sistemasInteligentes/Aula06-slidesAM/Aula08-arvoresDecisao/experimentos/dados/vinhos.csv", header=F)
View(vinhos)
names(vinhos) <- c("cultivars", "alcohol", "acid", "Ash", "Alcalinity", "Magnesium", "phenols", "Flavanoids", "Nonflavanoid", "Proanthocyanins", "ColorIntensity", "Hue", "OD280", "Proline")
View(vinhos)
ind <- sample(2, nrow(vinhos), replace = TRUE, prob = c(0.7, 0.3))
trainData <- vinhos[ind == 1, ]
testData <- vinhos[ind == 2, ]
library(RWeka)
model <- J48(cultivars ~ ., data= trainData)
class(trainData$cultivars)
vinhos$cultivars <- as.factor(paste(vinhos$cultivars))
class(trainData$cultivars)
class(vinhos$cultivars)
trainData <- vinhos[ind == 1, ]
testData <- vinhos[ind == 2, ]
model <- J48(cultivars ~ ., data= trainData)
plot(model)
testPred <- predict(model, newdata = testData)
table(testPred, testData$cultivars)
install.packages("RJSONIO")
library(RJSONIO)
library(randomForest)
data(iris)
model <- randomForest(Species ~., data=iris)
getTree(model,1, labelVar=TRUE)
getTree(model,1)
getTree(model,1, labelVar=TRUE)
toJSON(getTree(model, 1, labelVar=TRUE))
help(getTree)
nome <- "maria"
134 * 5
t <- 134 * 6
t
classe(t)
class(t)
x <- c(1,2,3,4,5,6,7)
x
list(x)
class(x)
setwd("~/Documents")
setwd("~/Documents/palestras/webMiningWithR/scripts")
load("../data/protesto.rda")
class(df)
head(df)
names(df)
summary(df$latitude)
df$text
library(tm)
help(kmeans)
